{"version":3,"file":"static/js/417.a0b64b7b.chunk.js","mappings":"mVAEMA,EAAW,+BACXC,EAAU,CACdC,OAAQ,CACNC,QAAS,qCAFb,SAMeC,EAAuB,GAAvBA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAAsCC,GAAtC,8FAA2CC,EAA3C,+BAAqD,GAArD,kBAE+BC,IAAAA,IAAUF,EAAKC,GAF9C,uBAEgBE,EAFhB,EAEgBA,KAFhB,kBAGeA,GAHf,yDAKe,IAAIC,MAAJ,sCAAyC,KAAMC,WAL9D,iFASO,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,+FACGC,EADH,UACqBZ,EADrB,gCAEuBI,EAAuBQ,EAAcX,GAF5D,uBAEKY,EAFL,EAEKA,QAFL,kBAGIA,GAHJ,kEAMA,SAASC,EAAkBC,GAE9B,OAAOX,EADQ,UAAMJ,EAAN,kBAAwBe,GACEd,GAGtC,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,oFACGC,EADH,UAC4BlB,EAD5B,iBAEGmB,EAAgB,CAClBjB,OAAQ,CACJC,QAAS,mCACTc,MAAAA,IALL,SAQuBb,EAAuBc,EAAqBC,GARnE,uBAQKN,EARL,EAQKA,QARL,kBASIA,GATJ,kEAYA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAyBL,GAAzB,kFACGM,EADH,UACiBrB,EADjB,kBACmCe,EADnC,qBAEoBX,EAAuBiB,EAAUpB,GAFrD,uBAEKqB,EAFL,EAEKA,KAFL,kBAGIA,GAHJ,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA4BR,GAA5B,kFACGS,EADH,UACoBxB,EADpB,kBACsCe,EADtC,qBAEuBX,EAAuBoB,EAAavB,GAF3D,uBAEKY,EAFL,EAEKA,QAFL,kBAGIA,GAHJ,kEAMA,SAAeY,IAAtB,4CAAO,OAAP,oBAAO,+FACGC,EADH,UACmB1B,EADnB,8BAEoBI,EAAuBsB,EAAYzB,GAFvD,uBAEI0B,EAFJ,EAEIA,OAFJ,kBAGIA,GAHJ,oE,qICnDMC,EAAWC,EAAAA,GAAAA,GAAH,gHAGZ,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,MAIfC,EAAOJ,EAAAA,GAAAA,KAAH,sFACA,SAAAC,GAAC,OAAIA,EAAEC,MAAMG,YAAYC,YAC/B,SAAAL,GAAC,OAAIA,EAAEC,MAAMK,OAAOC,aACT,SAAAP,GAAC,OAAIA,EAAEC,MAAMK,OAAOE,WAG7BC,EAAOV,EAAAA,GAAAA,EAAH,iEACD,SAAAC,GAAC,OAAIA,EAAEC,MAAMS,UAAUC,OACtB,SAAAX,GAAC,OAAIA,EAAEC,MAAMW,YAAYC,W,SCc1C,EA1Ba,WACX,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOtB,EAAP,KAAauB,EAAb,KACO9B,GAAW+B,EAAAA,EAAAA,MAAX/B,QAMP,OAJAgC,EAAAA,EAAAA,YAAU,YACR3B,EAAAA,EAAAA,GAAUL,GAASiC,KAAKH,KACzB,CAAC9B,KAGA,8BACGO,IAAS,SAACM,EAAD,UACPN,EAAK2B,MAAM,EAAG,IAAIC,KAAI,gBAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAAcC,EAA3C,EAA2CA,GAA3C,OACrB,2BACE,gBACEC,IAAG,yCAAoCF,GACvCG,IAAKL,KAEP,UAACZ,EAAD,YAAM,SAACN,EAAD,oBAAN,IAA0BkB,MAC1B,UAACZ,EAAD,YAAM,SAACN,EAAD,yBAAN,IAA+BmB,OANxBE","sources":["components/API/MovieApiService.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst OPTIONS = {\n  params: {\n    api_key: '470b53b8228b70c791d3c6418cea7265',\n  }\n}\n\nasync function fetchWithErrorHandling(url, options = {}) {\n    try {\n        const { data } = await axios.get(url, options);\n        return data;\n    } catch (error) {\n        return new Error(`Sorry something went wrong. ${error.message}`);\n    }\n}\n\nexport async function fetchTrendingMovies() {\n    const TRENDING_URL = `${BASE_URL}/trending/movie/day`;\n    const { results } = await fetchWithErrorHandling(TRENDING_URL, OPTIONS); \n    return results;\n}\n\nexport function fetchMovieDetails(movieId) {\n    const MOVIE_URL = `${BASE_URL}/movie/${movieId}`;\n    return fetchWithErrorHandling(MOVIE_URL, OPTIONS);\n}\n\nexport async function fetchSearchingMovie(query) {\n    const SEARCHING_MOVIE_URL = `${BASE_URL}/search/movie`;\n    const optionsSearch = {\n        params: {\n            api_key: '470b53b8228b70c791d3c6418cea7265',\n            query,\n        }\n    };\n    const { results } = await fetchWithErrorHandling(SEARCHING_MOVIE_URL, optionsSearch); \n    return results;\n}\n\nexport async function fetchCast(movieId) {\n    const CAST_URL = `${BASE_URL}/movie/${movieId}/credits`;\n    const { cast } = await fetchWithErrorHandling(CAST_URL, OPTIONS); \n    return cast;\n}\n\nexport async function fetchReviews(movieId) {\n    const REVIEWS_URL = `${BASE_URL}/movie/${movieId}/reviews`;\n    const { results } = await fetchWithErrorHandling(REVIEWS_URL, OPTIONS); \n    return results;\n}\n\nexport async function fetchGenresList() {\n    const GENRES_URL = `${BASE_URL}/genre/movie/list`;\n    const {genres} = await fetchWithErrorHandling(GENRES_URL, OPTIONS); \n    return genres;\n}","import styled from \"styled-components\";\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: ${p => p.theme.space[7]}px;\n  justify-content: space-between;\n`\n\nexport const Info = styled.span`\n  font-weight: ${p => p.theme.fontWeights.semiBold};\n  color: ${p => p.theme.colors.secondary};\n  background-color: ${p => p.theme.colors.primary};\n`\n\nexport const Text = styled.p`\n  font-size:  ${p => p.theme.fontSizes.xxs};\n  line-height: ${p => p.theme.lineHeights.heading};\n`","import { fetchCast } from 'components/API/MovieApiService';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastList, Info, Text } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const {movieId} = useParams();\n  \n  useEffect(() => {\n    fetchCast(movieId).then(setCast);\n}, [movieId])\n\n  return (\n    <>\n      {cast && (<CastList>\n        {cast.slice(0, 10).map(({ original_name, character, profile_path, id }) => (\n          <li key={id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n              alt={original_name}\n            />\n            <Text><Info>Name:</Info> {original_name}</Text>\n            <Text><Info>Character:</Info> {character}</Text>\n          </li>\n        ))}\n      </CastList>)}\n    </>\n  );\n};\n\nexport default Cast;"],"names":["BASE_URL","OPTIONS","params","api_key","fetchWithErrorHandling","url","options","axios","data","Error","message","fetchTrendingMovies","TRENDING_URL","results","fetchMovieDetails","movieId","fetchSearchingMovie","query","SEARCHING_MOVIE_URL","optionsSearch","fetchCast","CAST_URL","cast","fetchReviews","REVIEWS_URL","fetchGenresList","GENRES_URL","genres","CastList","styled","p","theme","space","Info","fontWeights","semiBold","colors","secondary","primary","Text","fontSizes","xxs","lineHeights","heading","useState","setCast","useParams","useEffect","then","slice","map","original_name","character","profile_path","id","src","alt"],"sourceRoot":""}